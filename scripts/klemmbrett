#!/usr/bin/env python

import os
import sys
import weakref
import collections
import ConfigParser


import pygtk
pygtk.require('2.0')
import gtk
import gobject
import keybinder


undefined = object()


class Config(ConfigParser.RawConfigParser):

    def get(self, section, option, default = undefined):
        try:
            return ConfigParser.RawConfigParser.get(self, section, option)
        except (ConfigParser.NoSectionError, ConfigParser.NoOptionError):
            if default is not undefined:
                return default
            raise


class Plugin(object):

    def __init__(self, klemmbrett, section):
        self._kb = weakref.proxy(klemmbrett)
        self._SECTION = section

    def config(self, key, default = undefined):
        return self._kb.config.get(self._SECTION, key, default)

    def set(self, widget = None, text = None):
        #print "setting new content: %r" % (buf,)
        self._kb.set(text)

    def cleanup_text(self, text):
        return text.replace('\n', ' ')[
            :min(
                len(text),
                int(self.config('line-length', 30)),
            )
        ].strip()

class StatusIconPlugin(Plugin):

    def __init__(self, *args, **kwargs):
        super(StatusIconPlugin, self).__init__(*args, **kwargs)
        self.tray = gtk.StatusIcon()
        # TODO: Needs stylish icon
        self.tray.set_from_stock(gtk.STOCK_ABOUT)
        self.tray.set_visible(True)
        self.tray.set_tooltip("Klemmbrett")
        self.menu = gtk.Menu()

        item = gtk.MenuItem("Quit")
        item.connect('activate', gtk.main_quit)

        self.menu.append(item)
        self.menu.show_all()
        self.tray.connect('popup-menu', self.on_menu, self.menu)

    def on_menu(self, icon, event_button, event_time, menu):
        menu.popup(
            None, None, gtk.status_icon_position_menu,
            event_button, event_time, self.tray
        )

class PopupPlugin(Plugin):

    def __init__(self, *args, **kwargs):
        super(PopupPlugin, self).__init__(*args, **kwargs)
        self.bind()

    def bind(self):
        keybinder.bind(
            self.config('shortcut', self._DEFAULT_BINDING),
            self.popup,
        )


    def popup(self):
        menu = gtk.Menu()

        # XXX(mbra): this will not work with values as "no", "off" etc.
        # since we do not use getbool
        if self.config('show-current-selection', False) and self._kb.history:
            item = gtk.MenuItem("")
            item.get_children()[0].set_markup("<b>%s</b>" % (self.cleanup_text(self._kb.history[0]),))
            menu.append(item)
        for label, value in self.items():
            item = gtk.MenuItem(label)
            item.connect("activate", self.set, value)
            menu.append(item)

        menu.show_all()
        menu.popup(
            None,
            None,
            None,
            1,
            gtk.get_current_event_time(),
        )
        return True


class HistoryPicker(PopupPlugin):

    _DEFAULT_BINDING = "<Ctrl><Alt>C"

    def items(self):
        for text in self._kb.history:
            yield (
                self.cleanup_text(text),
                text
            )


class SnippetPicker(PopupPlugin):

    _DEFAULT_BINDING = "<Ctrl><Alt>S"

    def items(self):
        if not self._kb.config.has_section('snippets'):
            return ValueError("No config section snippets defined")

        return self._kb.config.items('snippets')

class ActionPicker(PopupPlugin):

    _DEFAULT_BINDING = "<Ctrl><Alt>A"

    def items(self):
        if not self._kb.config.has_section('actions'):
            return ValueError("No config section actions defined")

        return self._kb.config.items('actions')


    def set(self, widget = None, text = None):
        #print "setting new content: %r" % (buf,)
        command = "/bin/bash -c " + text % (self._kb.history[0],)
        gobject.spawn_async(["/bin/bash", "-c", text % (self._kb.history[0],)])
        #self._kb.set(text)


class Klemmbrett(object):

    def __init__(self, config_files):

        self._clipboard = gtk.Clipboard(selection = "CLIPBOARD")
        self._primary = gtk.Clipboard(selection = "PRIMARY")

        self.config = Config()
        self.config.read(config_files)

        # configure klemmbrett
        self.history = collections.deque(
            maxlen = int(self.config.get("klemmbrett", "length", 2)),
        )

        # bootstrap / configure plugins
        self._plugins = []
        self._load_plugins()


        self._schedule_check()

    def _load_plugins(self):
        for section in self.config.sections():
            if not section.startswith('plugin '):
                continue

            # load the plugin module and create an instance
            plugin = self.load_object(
                self.config.get(section, 'plugin'),
            )(self, section)
            self._plugins.append(plugin)

    def is_new(self, text):
        if not len(self.history):
            return True
        return text != self.history[0]

    def add(self, text):
        if text.strip():
            self.history.appendleft(text)

    def _schedule_check(self):
        gobject.timeout_add(
            self.config.get('klemmbrett', 'check-interval', 300),
            self._check,
        )

    def _check(self):
        def _check(source, dest):
            text = source.wait_for_text()
            if text and self.is_new(text):
                self.add(text)
                #print "setting new text: %r" % (text,)
                dest.set_text(text)
                return True
            return False

        if not _check(self._primary, self._clipboard):
            _check(self._clipboard, self._primary)
        self._schedule_check()

    def set(self, text):
        self._clipboard.set_text(text)
        self._primary.set_text(text)

    def main(self):
        gtk.main()

    def load_object(self, name):
        if not '.' in name:
            return globals()[name]

        """ stolen from andre malos wtf daemon """
        components = name.split('.')
        path = [components.pop(0)]
        obj = __import__(path[0])
        while components:
            comp = components.pop(0)
            path.append(comp)
            try:
                obj = getattr(obj, comp)
            except AttributeError:
                __import__('.'.join(path))
                try:
                    obj = getattr(obj, comp)
                except AttributeError:
                    raise ImportError('.'.join(path))
        return obj


if __name__ == '__main__':
    kb = Klemmbrett(['/etc/klemmbrett.conf', os.path.expanduser("~/.klemmbrett.conf")])
    kb.main()
